// Services/AutoMailService.cs (TEST Only)
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Mail;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using t23p0.Models;

namespace t23p0.Services
{
    public interface IAutoMailService
    {
        Task<MailSendResult> GenerateAndSendTestMailAsync(MailRequest request);
    }

    public class AutoMailService : IAutoMailService
    {
        private readonly IConfiguration _configuration;

        public AutoMailService(IConfiguration configuration)
        {
            _configuration = configuration;
        }

        public async Task<MailSendResult> GenerateAndSendTestMailAsync(MailRequest request)
        {
            try
            {
                // Hardcoded test data
                var testRecipient = new MailRecipient
                {
                    Code = "TEST",
                    Name = "Nandana Pramod",
                    Email = "nandanapramodak@gmail.com",
                    Department = "Testing",
                    Role = "Developer"
                };

                var testTemplate = new MailTemplate
                {
                    Code = "TEST",
                    Subject = "AMS Test Email - {Date}",
                    BodyTemplate = @"Dear {RecipientName},

This is a test email from your Auto Mail Generation System.

Test Details:
- Date: {Date}
- System Status: {SystemStatus}
- Test Message: {TestMessage}
- Department: {Department}
- Role: {Role}

If you receive this email, your SMTP configuration is working correctly!

Best regards,
AMS Test System",
                    Category = "Testing"
                };

                // Generate test data
                var testData = new Dictionary<string, object>
                {
                    { "SystemStatus", "Working Perfectly" },
                    { "TestMessage", "SMTP configuration successful!" }
                };

                // Generate mail content
                var subject = ProcessTemplate(testTemplate.Subject, testData, request.SelectedDate, testRecipient);
                var body = ProcessTemplate(testTemplate.BodyTemplate, testData, request.SelectedDate, testRecipient);

                var mailContent = new MailContent
                {
                    Subject = subject,
                    Body = body,
                    RecipientEmail = testRecipient.Email,
                    RecipientName = testRecipient.Name,
                    SenderEmail = _configuration["EmailSettings:SenderEmail"] ?? "nandanapramodak@gmail.com",
                    SenderName = _configuration["EmailSettings:SenderName"] ?? "AMS Test System"
                };

                // Send email
                await SendEmailAsync(mailContent);

                return new MailSendResult
                {
                    Success = true,
                    Message = "Test mail sent successfully",
                    SentAt = DateTime.Now,
                    RecipientEmail = mailContent.RecipientEmail
                };
            }
            catch (Exception ex)
            {
                return new MailSendResult
                {
                    Success = false,
                    Message = $"Error: {ex.Message}"
                };
            }
        }

        private async Task SendEmailAsync(MailContent mailContent)
        {
            var smtpHost = _configuration["EmailSettings:SmtpHost"] ?? "smtp.gmail.com";
            var smtpPort = int.Parse(_configuration["EmailSettings:SmtpPort"] ?? "587");
            var username = _configuration["EmailSettings:Username"];
            var password = _configuration["EmailSettings:Password"];

            using (var client = new SmtpClient(smtpHost, smtpPort))
            {
                client.EnableSsl = true;
                client.Credentials = new NetworkCredential(username, password);

                var mailMessage = new MailMessage
                {
                    From = new MailAddress(mailContent.SenderEmail, mailContent.SenderName),
                    Subject = mailContent.Subject,
                    Body = mailContent.Body,
                    IsBodyHtml = false
                };

                mailMessage.To.Add(new MailAddress(mailContent.RecipientEmail, mailContent.RecipientName));

                await client.SendMailAsync(mailMessage);
            }
        }

        private string ProcessTemplate(string template, Dictionary<string, object> data, DateTime date, MailRecipient recipient)
        {
            var result = template;

            // Replace basic placeholders
            result = result.Replace("{RecipientName}", recipient.Name);
            result = result.Replace("{Date}", date.ToString("dd MMMM yyyy"));
            result = result.Replace("{Department}", recipient.Department);
            result = result.Replace("{Role}", recipient.Role);

            // Replace data placeholders
            foreach (var kvp in data)
            {
                result = result.Replace($"{{{kvp.Key}}}", kvp.Value?.ToString() ?? "");
            }

            return result;
        }
    }

    // Model classes (if not already defined)
    public class MailRecipient
    {
        public string Code { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Department { get; set; }
        public string Role { get; set; }
    }

    public class MailTemplate
    {
        public string Code { get; set; }
        public string Subject { get; set; }
        public string BodyTemplate { get; set; }
        public string Category { get; set; }
    }

    public class MailContent
    {
        public string Subject { get; set; }
        public string Body { get; set; }
        public string RecipientEmail { get; set; }
        public string RecipientName { get; set; }
        public string SenderEmail { get; set; }
        public string SenderName { get; set; }
    }

    public class MailSendResult
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public DateTime SentAt { get; set; }
        public string RecipientEmail { get; set; }
    }

    public class MailRequest
    {
        public string Code { get; set; }
        public DateTime SelectedDate { get; set; }
    }
}
